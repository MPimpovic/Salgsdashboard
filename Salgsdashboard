/**
 * onOpen() – Tilføjer en brugerdefineret menu til regnearket.
 */
function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu("Opdatering")
    .addItem("Scan nye mails", "scanAllMails")
    .addItem("Refresh alle mails (inkluder arkiverede)", "refreshAllMails")
    .addToUi();
}

/**
 * scanAllMails() – Scanner kun mails med de aktive labels.
 */
function scanAllMails() {
  Logger.log("Starter scanning af nye mails…");
  
  checkVintedMails(false);
  checkDbaMails(false);
  checkTraderaMails(false);
  
  SpreadsheetApp.flush();
  setupConditionalFormatting();
  updateDashboard();
  applyStrikethroughToCancelled();
  formatArk1();
  formatDashboard();
  
  Logger.log("Færdig med scanning af nye mails.");
}

/**
 * refreshAllMails() – Scanner alle mails, inklusive dem med label "Arkiveret - Script".
 */
function refreshAllMails() {
  Logger.log("Starter refresh – scanner alle mails (inkluderer arkiverede) …");
  
  checkVintedMails(true);
  checkDbaMails(true);
  checkTraderaMails(true);
  
  SpreadsheetApp.flush();
  setupConditionalFormatting();
  updateDashboard();
  applyStrikethroughToCancelled();
  formatArk1();
  formatDashboard();
  
  Logger.log("Refresh færdig – alle mails (inkluderede arkiverede) er scannet.");
}

/***********************************************************
 * FUNKTIONER TIL AT TJEKKE MAILS
 ***********************************************************/
function checkVintedMails(includeArchived) {
  Logger.log("Nu tjekkes Vinted-mails for køb/annullering …");
  var labelName = "Vinted Transaktioner";
  var archiveLabelName = "Arkiveret - Script";
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Ark1");
  
  var threads;
  if (includeArchived) {
    var query = 'label:"' + labelName + '" OR label:"' + archiveLabelName + '"';
    threads = GmailApp.search(query);
  } else {
    var label = GmailApp.getUserLabelByName(labelName);
    threads = label ? label.getThreads() : [];
  }
  
  Logger.log("Fundet " + threads.length + " Vinted-mails.");
  for (var i = 0; i < threads.length; i++) {
    var messages = threads[i].getMessages();
    for (var j = 0; j < messages.length; j++) {
      var msg = messages[j];
      var content = msg.getPlainBody();
      Logger.log("Vinted-mail: " + msg.getSubject());
      
      if (content.includes("Din Vinted købskvittering") || content.includes("Din kvittering for")) {
        var tid = extractTransactionId(content);
        var date = extractPurchaseDate(content);
        var price = extractPurchasePrice(content);
        var name = extractItemName(content);
        
        Logger.log("Overfører Vinted-data: Transaktions-id=" + tid + ", Dato=" + date + ", Pris=" + price + ", Vare=" + name);
        
        var existing = findRowByTransactionId(sheet, tid);
        var row = (existing != -1) ? existing : getFirstEmptyRow(sheet);
        sheet.getRange(row, 1).setValue(tid);
        sheet.getRange(row, 2).setValue(date);
        sheet.getRange(row, 3).setValue(price);
        sheet.getRange(row, 4).setValue(name);
        sheet.getRange(row, 7).setValue("På lager");
        sheet.getRange(row, 12).setValue("Vinted");
      }
      else if (content.toLowerCase().includes("annulleret") || content.toLowerCase().includes("refundering")) {
        var tid2 = extractTransactionId(content);
        var row2 = findRowByTransactionId(sheet, tid2);
        if (row2 !== -1) {
          Logger.log("Markerer transaktions-id " + tid2 + " som annulleret.");
          sheet.getRange(row2, 7).setValue("Annulleret");
        } else {
          Logger.log("Kunne ikke finde transaktions-id " + tid2 + " for annullering.");
        }
      }
    }
    // Uanset tilstand, fjern den aktive label og sæt arkiveret
    threads[i].removeLabel(GmailApp.getUserLabelByName(labelName));
    threads[i].addLabel(GmailApp.getUserLabelByName(archiveLabelName));
    threads[i].markRead();
  }
  Logger.log("Færdig med Vinted-mails.");
}

function checkDbaMails(includeArchived) {
  Logger.log("Nu tjekkes DBA-mails for salg …");
  var labelName = "DBA Salg";
  var archiveLabelName = "Arkiveret - Script";
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Ark1");
  
  var threads;
  if (includeArchived) {
    var query = 'label:"' + labelName + '" OR label:"' + archiveLabelName + '"';
    threads = GmailApp.search(query);
  } else {
    var label = GmailApp.getUserLabelByName(labelName);
    threads = label ? label.getThreads() : [];
  }
  
  Logger.log("Fundet " + threads.length + " DBA-mails.");
  for (var i = 0; i < threads.length; i++) {
    var messages = threads[i].getMessages();
    for (var j = 0; j < messages.length; j++) {
      var msg = messages[j];
      var content = msg.getPlainBody();
      var htmlContent = msg.getBody();
      var subject = msg.getSubject();
      
      Logger.log("DBA-mail: " + subject);
      var product = extractDbaProductName(content, subject);
      if (!product.toLowerCase().includes("chromecast") && !product.toLowerCase().includes("apple tv")) {
        var alt = detectLikelyProductInBody(content);
        if (alt) product = alt;
      }
      product = guessChromecastModel(product);
      Logger.log("DBA – Fundet varenavn: " + product);
      
      var saleDate = msg.getDate();
      var row = findRowByProductName(sheet, product);
      if (row !== -1) {
        // Hvis varen allerede er solgt, spring over denne mail
        var currentStatus = sheet.getRange(row, 7).getValue();
        if (String(currentStatus).toLowerCase() === "solgt") {
          Logger.log("Vare i række " + row + " er allerede solgt – springer over.");
          continue;
        }
        
        Logger.log("Match fundet for '" + product + "' i række " + row + ". Overfører salgsdata…");
        sheet.getRange(row, 5).setValue(saleDate);
        sheet.getRange(row, 7).setValue("Solgt");
        sheet.getRange(row, 11).setValue("DBA");
        
        var code = extractShippingCode(content);
        if (!code) {
          code = parseInlineQrImage(htmlContent);
        }
        if (!code) {
          code = getQRCodeAttachmentUrl(msg);
        }
        if (code && isValidShippingCode(code)) {
          Logger.log("Overfører QR-/DAO-kode: " + code);
          sheet.getRange(row, 10).setValue(code);
          if (content.toLowerCase().includes("gls")) {
            sheet.getRange(row, 9).setValue("GLS");
          } else {
            sheet.getRange(row, 9).setValue("DAO");
          }
        } else {
          Logger.log("Ingen (gyldig) QR-/DAO-kode fundet i mailen. Code=" + code);
        }
      } else {
        Logger.log("Ingen match fundet i Ark1 for varenavn: " + product + " (" + subject + ")");
      }
    }
    threads[i].removeLabel(GmailApp.getUserLabelByName(labelName));
    threads[i].addLabel(GmailApp.getUserLabelByName(archiveLabelName));
    threads[i].markRead();
  }
  Logger.log("Færdig med DBA-mails.");
}

function checkTraderaMails(includeArchived) {
  Logger.log("Nu tjekkes Tradera-mails for køb …");
  var labelName = "Tradera";
  var archiveLabelName = "Arkiveret - Script";
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Ark1");
  
  var threads;
  if (includeArchived) {
    var query = 'label:"' + labelName + '" OR label:"' + archiveLabelName + '"';
    threads = GmailApp.search(query);
  } else {
    var label = GmailApp.getUserLabelByName(labelName);
    threads = label ? label.getThreads() : [];
  }
  
  Logger.log("Fundet " + threads.length + " Tradera-mails.");
  for (var i = 0; i < threads.length; i++) {
    var messages = threads[i].getMessages();
    for (var j = 0; j < messages.length; j++) {
      var msg = messages[j];
      if (msg.isUnread()) {
        var subject = msg.getSubject();
        var content = msg.getPlainBody();
        Logger.log("Tradera-mail: " + subject);
        
        var orderNumber = extractTraderaOrderNumber(content);
        var productNameRaw = extractTraderaProductFromSubject(subject);
        var productName = guessChromecastModel(productNameRaw);
        
        var totalMatch = content.match(/Total beløb:\s*([\d.,]+)\s*([A-Z]{2,4})/i);
        var totalAmount = "";
        if (totalMatch) {
          var numeric = parseFloat(totalMatch[1].replace(",", "."));
          var currency = totalMatch[2].toUpperCase();
          totalAmount = numeric + " " + currency;
        }
        
        var shipping = extractShippingProvider(content) || "GLS";
        Logger.log("Tradera – Overfører: Ordrenr=" + orderNumber + ", Beløb=" + totalAmount +
                   ", Vare=" + productName + ", Fragt=" + shipping);
        
        var existing = findRowByTransactionId(sheet, orderNumber);
        var row = (existing != -1) ? existing : getFirstEmptyRow(sheet);
        sheet.getRange(row, 1).setValue(orderNumber);
        sheet.getRange(row, 2).setValue(msg.getDate());
        sheet.getRange(row, 3).setValue(totalAmount);
        sheet.getRange(row, 4).setValue(productName);
        sheet.getRange(row, 9).setValue(shipping);
        sheet.getRange(row, 12).setValue("Tradera");
      }
    }
    threads[i].removeLabel(GmailApp.getUserLabelByName(labelName));
    threads[i].addLabel(GmailApp.getUserLabelByName(archiveLabelName));
  }
  Logger.log("Færdig med Tradera-mails.");
}

/***********************************************************
 * HELPER-FUNKTIONER
 ***********************************************************/
function isValidShippingCode(code) {
  if (!code) return false;
  var trimmed = code.trim().toLowerCase();
  if (trimmed.length < 5) return false;
  if (["fra","til","med"].indexOf(trimmed) !== -1) return false;
  return true;
}

function extractShippingCode(content) {
  var regex = /Din\s+(?:(?:DAO indleveringskode)|(?:QR[-\s]?kode(?: fra GLS)?))(?:\s*(?:er:\s*)?)\r?\n?\s*([A-Za-z0-9\-]+)/i;
  var match = content.match(regex);
  if (!match) return "";
  var code = match[1].trim();
  return code;
}

function parseInlineQrImage(html) {
  if (!html) return "";
  var regex = /<img[^>]+src="([^"]+(?:homerunner|googleusercontent)[^"]+)"/i;
  var match = html.match(regex);
  return match ? match[1] : "";
}

function getQRCodeAttachmentUrl(msg) {
  var attachments = msg.getAttachments();
  for (var i = 0; i < attachments.length; i++) {
    var att = attachments[i];
    var filename = att.getName().toLowerCase();
    if (filename.indexOf("qr") !== -1) {
      var folder = getOrCreateFolder("QR Codes");
      var file = folder.createFile(att);
      return file.getUrl();
    }
  }
  return "";
}

function getOrCreateFolder(folderName) {
  var folders = DriveApp.getFoldersByName(folderName);
  if (folders.hasNext()) {
    return folders.next();
  } else {
    return DriveApp.createFolder(folderName);
  }
}

function extractShippingProvider(content) {
  var providers = ["dao", "postnord", "gls", "bring", "dhl"];
  var lower = content.toLowerCase();
  for (var i = 0; i < providers.length; i++) {
    if (lower.includes(providers[i])) {
      var p = providers[i];
      switch (p) {
        case "dao": return "DAO";
        case "postnord": return "PostNord";
        case "gls": return "GLS";
        case "bring": return "Bring";
        case "dhl": return "DHL";
      }
    }
  }
  return "";
}

function extractWithRegex(content, regex) {
  var match = content.match(regex);
  return match ? match[1].trim() : "";
}

function detectLikelyProductInBody(content) {
  var lower = content.toLowerCase();
  if (lower.includes("chromecast 3")) return "Chromecast 3";
  if (lower.includes("chromecast 2")) return "Chromecast 2";
  if (lower.includes("apple tv"))     return "Apple TV";
  if (lower.includes("chromecast"))   return "Chromecast";
  return "";
}

function guessChromecastModel(rawName) {
  var lower = rawName.toLowerCase().trim().replace(/^google\s+/, "");
  if (lower.includes("apple tv")) return "Apple TV";
  if (lower.includes("chromecast")) {
    if (lower.includes("hd")) return "Chromecast HD";
    if (lower.includes("4k")) return "Chromecast 4K";
    if (lower.includes("2")) return "Chromecast 2";
    if (lower.includes("3")) return "Chromecast 3";
    return "Chromecast";
  }
  return rawName;
}

function findRowByTransactionId(sheet, id) {
  var data = sheet.getDataRange().getValues();
  for (var i = 1; i < data.length; i++) {
    if (String(data[i][0]) === String(id)) {
      return i + 1;
    }
  }
  return -1;
}

function findRowByProductName(sheet, productName) {
  var norm = guessChromecastModel(productName).toLowerCase();
  var data = sheet.getDataRange().getValues();
  for (var i = 1; i < data.length; i++) {
    var val = data[i][3];
    var status = data[i][6] ? data[i][6].toLowerCase().trim() : "";
    if (val && status === "på lager") {
      var normVal = guessChromecastModel(String(val)).toLowerCase();
      if (normVal.indexOf(norm) !== -1 || norm.indexOf(normVal) !== -1) {
        return i + 1;
      }
    }
  }
  Logger.log("Ingen match for: " + productName);
  return -1;
}

function logDebug(fnName, msg) {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Debug");
  if (!sheet) {
    Logger.log("FEJL (" + fnName + "): " + msg);
    return;
  }
  var row = sheet.getLastRow() + 1;
  sheet.getRange(row, 1).setValue(new Date());
  sheet.getRange(row, 2).setValue(fnName);
  sheet.getRange(row, 3).setValue(msg);
}

function getFirstEmptyRow(sheet) {
  var lastRow = sheet.getLastRow();
  if (lastRow < 2) return 2;
  var data = sheet.getRange(2, 1, lastRow - 1, 1).getValues();
  for (var i = 0; i < data.length; i++) {
    if (!data[i][0]) return i + 2;
  }
  return lastRow + 1;
}

function extractTraderaOrderNumber(content) {
  var regex = /Ordrenummer\s*(\d+)/i;
  var match = content.match(regex);
  return match ? match[1].trim() : "";
}

function extractTraderaProductFromSubject(subject) {
  var regex = /-\s*(.*?)\s*\(/;
  var match = subject.match(regex);
  if (match) return match[1].trim();
  return subject.trim();
}

/***********************************************************
 * VINTED-FUNKTIONER
 ***********************************************************/
function extractItemName(content) {
  var regex1 = /\*Ordre:\*\s*([\s\S]+?)(?:\*Betalt:\*|Betalt:)/i;
  var regex2 = /Ordre:\s*([\s\S]+?)(?:Betalt:)/i;
  var match = content.match(regex1) || content.match(regex2);
  var rawName = match ? match[1].trim() : "";
  Logger.log("Vinted – Fundet varenavn: " + rawName);
  return guessChromecastModel(rawName);
}

function extractPurchasePrice(content) {
  var match = content.match(/\*?Betalt:\*?\s*([\d.,]+)\s*kr\./i);
  if (match) {
    var priceStr = match[1];
    if (priceStr.indexOf(",") > -1 && priceStr.indexOf(".") > -1) {
      if (priceStr.lastIndexOf(",") > priceStr.lastIndexOf(".")) {
        priceStr = priceStr.replace(/\./g, "").replace(/,/g, ".");
      } else {
        priceStr = priceStr.replace(/,/g, "");
      }
    } else if (priceStr.indexOf(",") > -1) {
      if (priceStr.length > 4) {
        priceStr = priceStr.replace(/,/g, "");
      } else {
        priceStr = priceStr.replace(/,/g, ".");
      }
    }
    return parseFloat(priceStr);
  }
  return "";
}

function extractPurchaseDate(content) {
  var match = content.match(/\*?Betalingsdato:\*?\s*(\d{2}\/\d{2}\/\d{4})\s+(\d{2}:\d{2})\s+(MORGEN|EFTERMIDDAG)/i);
  if (match) {
    var date = match[1];
    var time = match[2];
    var period = match[3];
    var englishPeriod = (period === "MORGEN") ? "AM" : "PM";
    var dateTime = date + " " + time + " " + englishPeriod;
    var dateObj = new Date(dateTime.replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3"));
    return dateObj;
  }
  return "";
}

function extractTransactionId(content) {
  return extractWithRegex(content, /\*?Transaktions-id:\*?\s*(\d+)/i);
}
