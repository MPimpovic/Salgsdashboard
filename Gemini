// ADMIN_EMAIL: Skift denne til din egen email, som skal modtage fejlnotifikationer
var ADMIN_EMAIL = "mission1993@hotmail.com"; // Eller din martin.pro.pavlovic@gmail.com

/**
 * onOpen() – Tilføjer brugerdefinerede menupunkter.
 */
function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu("Opdatering")
    .addItem("Scan nye mails", "safeScanAllMails")
    .addItem("Refresh alle mails (inkluder arkiverede)", "safeRefreshAllMails")
    .addItem("Scan hele indbakken (BRUG MED FORSIGT)", "safeScanEntireInbox")
    .addItem("Opdater Dashboard manuelt", "safeUpdateDashboard")
    .addToUi();
}

/* Wrapper til fejlhåndtering */
function safeExecute(fn) {
  try {
    fn();
  } catch (e) {
    var functionName = fn.name || 'anonym funktion';
    Logger.log("FEJL i " + functionName + ": " + e + " Linje: " + e.lineNumber + " Fil: " + e.fileName);
    try {
      MailApp.sendEmail(ADMIN_EMAIL, "Fejl i script (" + functionName + ")", "Fejl: " + e + "\nLinje: " + e.lineNumber + "\nStack:\n" + (e.stack ? e.stack : 'Ingen stack trace'));
    } catch (mailError) { Logger.log("Kunne ikke sende fejlmail: " + mailError); }
  }
}

function safeScanAllMails() { safeExecute(scanAllMails); }
function safeRefreshAllMails() { safeExecute(refreshAllMails); }
function safeScanEntireInbox() { safeExecute(scanEntireInbox); }
function safeUpdateDashboard() { safeExecute(updateDashboard); }

/**
 * scanAllMails() – Scanner mails med de aktive labels.
 */
function scanAllMails() {
  Logger.log("Starter scanning af nye mails…");
  safeExecute(function(){ checkVintedMails(false); });
  safeExecute(function(){ checkDbaMails(false); });
  safeExecute(function(){ checkTraderaMails(false); });
  safeExecute(function(){ checkShopifyMails(false); });
  SpreadsheetApp.flush(); // Sørg for at alle writes er gennemført før formatering/dashboard
  safeExecute(formatArk1); // Formaterer og sorterer
  safeExecute(updateDashboard); // Opdaterer dashboard baseret på formateret data
  Logger.log("Færdig med scanning af nye mails.");
}

/**
 * refreshAllMails() – Scanner alle mails inkl. arkiverede.
 */
function refreshAllMails() {
  Logger.log("Starter refresh – scanner alle mails …");
  safeExecute(function(){ checkVintedMails(true); });
  safeExecute(function(){ checkDbaMails(true); });
  safeExecute(function(){ checkTraderaMails(true); });
  safeExecute(function(){ checkShopifyMails(true); });
  SpreadsheetApp.flush();
  safeExecute(formatArk1); // Formaterer og sorterer
  // Opdaterer ALLE beregnede værdier i M, O, P baseret på eksisterende data C og F
  safeExecute(recalculateAllMOP);
  safeExecute(updateDashboard); // Opdaterer dashboard til sidst
  Logger.log("Refresh færdig – alle mails er scannet og M,O,P genberegnet.");
}

/**
 * scanEntireInbox() – Scanner hele indbakken og behandler mails.
 */
function scanEntireInbox() {
  Logger.log("Starter scanning af hele indbakken …");
  var threads = GmailApp.search("in:inbox"); Logger.log("Fundet " + threads.length + " tråde."); var counter = 0;
  for (var i = 0; i < threads.length; i++) { if (counter > 500) { Logger.log("Stopper scanning efter 500 tråde."); break; } var messages = threads[i].getMessages();
    for (var j = 0; j < messages.length; j++) { var msg = messages[j]; var subject = msg.getSubject().toLowerCase(); var content = ""; try { content = msg.getPlainBody().toLowerCase(); } catch (e) { Logger.log("Kunne ikke læse body: " + subject + " - " + e); continue; } var sender = msg.getFrom().toLowerCase();
      if (content.includes("din vinted købskvittering") || content.includes("din kvittering for") || content.includes("annulleret") || content.includes("refundering")) { Logger.log("Potentiel Vinted: " + subject); safeExecute(function(){ processVintedMail(msg); });
      } else if ((sender.includes("shopify") || subject.includes("[refindtech]")) && subject.includes("ordre #") && (subject.includes("afgivet af") || subject.includes("bekræftet"))) { Logger.log("Shopify-salg: " + subject); safeExecute(function(){ processShopifyMail(msg); });
      } else if (subject.includes("dba") && (content.includes("pak ") || content.includes("qr-kode") || content.includes("indleveringskode"))) { Logger.log("Potentiel DBA-salg: " + subject); safeExecute(function(){ processDbaMail(msg); });
      } else if (subject.includes("tradera") && (subject.includes("du har vundet") || subject.includes("betalning mottagen"))) { Logger.log("Potentiel Tradera-køb: " + subject); safeExecute(function(){ processTraderaMail(msg); }); } } counter++; }
  SpreadsheetApp.flush(); safeExecute(formatArk1); safeExecute(recalculateAllMOP); safeExecute(updateDashboard); Logger.log("Færdig med scanning af hele indbakken.");
}


/***********************************************************
 * FUNKTIONER TIL MAILPROCESSERING – Vinted, DBA, Tradera, Shopify
 ***********************************************************/

// --- VINTED ---
function processVintedMail(msg) {
  try { var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Ark1"); var content = ""; try { content = msg.getPlainBody(); } catch(e){Logger.log("Kunne ikke læse Vinted body: " + msg.getSubject()); return;} var subject = msg.getSubject(); Logger.log("Behandler Vinted-mail: " + subject);
    if (content.includes("Din Vinted købskvittering") || content.includes("Din kvittering for")) {
      var tid = extractTransactionId(content); var date = extractPurchaseDate(content); var price = extractNumericPurchasePrice(content); var name = extractItemName(content); var seller = extractSellerName(content);
      if (!tid || !date || price === null || !name) { Logger.log("ADVARSEL: Kunne ikke udtrække Vinted købsdata: " + subject); return; }
      Logger.log("Overfører Vinted: ID=" + tid + "; Dato=" + date + "; Pris=" + price + "; Vare=" + name + "; Sælger=" + seller);
      var existingRow = findRowByTransactionId(sheet, tid); var row = (existingRow !== -1) ? existingRow : getFirstEmptyRow(sheet);
      sheet.getRange(row, 1).setValue(tid); sheet.getRange(row, 2).setValue(date); sheet.getRange(row, 3).setValue(price).setNumberFormat("0.00"); sheet.getRange(row, 4).setValue(name);
      var currentStatus = sheet.getRange(row, 7).getValue(); if (existingRow === -1 || (currentStatus && currentStatus.toLowerCase() !== 'solgt' && currentStatus.toLowerCase() !== 'annulleret')) { sheet.getRange(row, 7).setValue("På lager"); }
      sheet.getRange(row, 12).setValue("Vinted"); sheet.getRange(row, 14).setValue(seller);
      if (existingRow === -1 || currentStatus.toLowerCase() === 'annulleret') { clearSalesData(sheet, row); } // Ryd salgsdata
      sheet.getRange(row, 1, 1, sheet.getLastColumn()).setFontLine("none"); calculateMOPForRow(sheet, row); // Beregn M,O,P

    } else if (content.toLowerCase().includes("annulleret") || content.toLowerCase().includes("refundering")) {
      var tidAnnulleret = extractTransactionId(content); if (!tidAnnulleret) { Logger.log("ADVARSEL: Kunne ikke finde ID i Vinted annullering: " + subject); return; }
      var rowAnnulleret = findRowByTransactionId(sheet, tidAnnulleret);
      if (rowAnnulleret !== -1) { Logger.log("Annullerer Vinted transaktion " + tidAnnulleret + " på række " + rowAnnulleret); var rowRange = sheet.getRange(rowAnnulleret, 1, 1, sheet.getLastColumn()); sheet.getRange(rowAnnulleret, 7).setValue("Annulleret"); clearSalesData(sheet, rowAnnulleret); rowRange.setFontLine("line-through");
      } else { logDebug("processVintedMail", "Annullering – ID ikke fundet: " + tidAnnulleret); }
    } else { Logger.log("Vinted mailtype ikke genkendt: " + subject); }
  } catch(e) { Logger.log("FEJL i processVintedMail: " + e); MailApp.sendEmail(ADMIN_EMAIL, "Fejl i processVintedMail", "Fejl: " + e + "\nStack:\n" + (e.stack ? e.stack : 'Ingen stack trace')); }
}

// --- DBA ---
function processDbaMail(msg) {
  try { var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Ark1"); var content = ""; var htmlContent = ""; try { content = msg.getPlainBody(); htmlContent = msg.getBody(); } catch (e) { Logger.log("Kunne ikke læse body/html i DBA mail: " + msg.getSubject()); return; } var subject = msg.getSubject(); Logger.log("Behandler DBA-mail: " + subject);
    var product = extractDbaProductName(content, subject); if (!product || (product.toLowerCase().indexOf("chromecast") === -1 && product.toLowerCase().indexOf("apple tv") === -1)) { var alt = detectLikelyProductInBody(content); product = alt ? alt : "Ukendt DBA Vare"; } product = guessChromecastModel(product); Logger.log("DBA – Fundet varenavn: " + product);
    var saleDate = msg.getDate(); var code = extractShippingCode(content); var provider = "";
    if (code && code.match(/^[\d-]+$/)) { provider = "DAO"; } else { var qrUrl = parseInlineQrImage(htmlContent); if (!qrUrl) { qrUrl = getQRCodeAttachmentUrl(msg); } code = qrUrl || code; if (qrUrl && qrUrl.startsWith("https://api.homerunner.com")) { provider = "GLS"; } else if (code && code.match(/^[\d-]+$/)) { provider = "DAO"; } else if (content.toLowerCase().includes("indleveringskode")) { provider = "DAO"; code = extractShippingCode(content) || "Kode mangler"; } else { code = "Kode mangler"; provider = "Ukendt"; } }
    var unsoldRow = findOldestUnsoldRowByProductName(sheet, product); var fallback = false;
    if (unsoldRow === -1) { fallback = true; unsoldRow = getFirstEmptyRow(sheet); Logger.log("Ingen 'På lager' fundet for " + product + ", fallback: ny række " + unsoldRow); sheet.getRange(unsoldRow, 4).setValue("RAW (DBA): " + product);
    } else { Logger.log("ÆLDSTE match for '" + product + "' fundet på række " + unsoldRow); sheet.getRange(unsoldRow, 4).setValue(product); }
    sheet.getRange(unsoldRow, 5).setValue(saleDate); sheet.getRange(unsoldRow, 7).setValue("Solgt"); sheet.getRange(unsoldRow, 9).setValue(provider); sheet.getRange(unsoldRow, 10).setValue(code); sheet.getRange(unsoldRow, 11).setValue("DBA");
    // Salgspris (F) og Salgsfragt (Q) skal indtastes manuelt for DBA
    sheet.getRange(unsoldRow, 6).clearContent(); sheet.getRange(unsoldRow, 17).clearContent();
    sheet.getRange(unsoldRow, 1, 1, sheet.getLastColumn()).setFontLine("none"); calculateMOPForRow(sheet, unsoldRow); // Beregn M,O,P
  } catch(e) { Logger.log("FEJL i processDbaMail: " + e); MailApp.sendEmail(ADMIN_EMAIL, "Fejl i processDbaMail", "Fejl: " + e + "\nStack:\n" + (e.stack ? e.stack : 'Ingen stack trace')); }
}

// --- TRADERA ---
function processTraderaMail(msg) {
  try { var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Ark1"); var content = ""; try { content = msg.getPlainBody(); } catch(e) {Logger.log("Kunne ikke læse body i Tradera mail: " + msg.getSubject()); return;} var subject = msg.getSubject(); Logger.log("Behandler Tradera-mail: " + subject);
    var orderNumber = extractTraderaOrderNumber(content); var productNameRaw = extractTraderaProductFromSubject(subject); var productName = guessChromecastModel(productNameRaw);
    var purchasePrice = extractNumericTraderaPrice(content); var shipping = extractShippingProvider(content) || "PostNord"; var purchaseDate = msg.getDate();
    if (!orderNumber || purchasePrice === null || !productName) { Logger.log("ADVARSEL: Kunne ikke udtrække Tradera data: " + subject); return; }
    Logger.log("Tradera – Overfører: Ordrenr=" + orderNumber + "; Pris=" + purchasePrice + "; Vare=" + productName + "; Fragt=" + shipping + "; Dato=" + purchaseDate);
    var existingRow = findRowByTransactionId(sheet, orderNumber); var row = (existingRow !== -1) ? existingRow : getFirstEmptyRow(sheet);
    sheet.getRange(row, 1).setValue(orderNumber); sheet.getRange(row, 2).setValue(purchaseDate); sheet.getRange(row, 3).setValue(purchasePrice).setNumberFormat("0.00").setNote("Valuta: SEK"); sheet.getRange(row, 4).setValue(productName); sheet.getRange(row, 9).setValue(shipping); sheet.getRange(row, 12).setValue("Tradera");
     var currentStatus = sheet.getRange(row, 7).getValue(); if (existingRow === -1 || (currentStatus && currentStatus.toLowerCase() !== 'solgt' && currentStatus.toLowerCase() !== 'annulleret')) { sheet.getRange(row, 7).setValue("På lager"); }
      if (existingRow === -1 || currentStatus.toLowerCase() === 'annulleret') { clearSalesData(sheet, row); } // Ryd salgsdata
     sheet.getRange(row, 1, 1, sheet.getLastColumn()).setFontLine("none"); calculateMOPForRow(sheet, row); // Beregn M,O,P
  } catch(e) { Logger.log("FEJL i processTraderaMail: " + e); MailApp.sendEmail(ADMIN_EMAIL, "Fejl i processTraderaMail", "Fejl: " + e + "\nStack:\n" + (e.stack ? e.stack : 'Ingen stack trace')); }
}

// --- SHOPIFY ---
function processShopifyMail(msg) {
  try { var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Ark1"); var content = ""; try{content = msg.getPlainBody();} catch(e){Logger.log("Kunne ikke læse body i Shopify mail: " + msg.getSubject()); return;} var subject = msg.getSubject(); Logger.log("Behandler Shopify-mail: " + subject);
    var orderMatch = subject.match(/Ordren\s*#(\d+)/i); var orderNumber = orderMatch ? orderMatch[1] : null; var productLines = []; var inOverview = false; var lines = content.split('\n');
    for (var i = 0; i < lines.length; i++) { var line = lines[i].trim(); if (line.toLowerCase().startsWith("ordreoversigt")) { inOverview = true; continue; } if (inOverview && line.match(/([\d.,]+\s*kr)\s*×\s*\d+/i)) { if (i > 0 && lines[i-1].trim().length > 0) { productLines.push(lines[i-1].trim()); } else { productLines.push("Ukendt produkt"); } } if (inOverview && line.toLowerCase().startsWith("subtotal")) { inOverview = false; break; } }
    var productNameRaw = productLines.length > 0 ? productLines.join(' & ') : "Ukendt Shopify Vare"; var productName = guessChromecastModel(productNameRaw);
     function parsePrice(priceString) { if (!priceString) return 0; return parseFloat(priceString.replace(/\s*(?:kr|DKK)/i, '').replace(/\./g, '').replace(/,/g, '.')) || 0; }
    var subtotalMatch = content.match(/Subtotal\s*([\d.,]+\s*kr)/i); var salesPrice = parsePrice(subtotalMatch ? subtotalMatch[1] : null); var shippingMatch = content.match(/Levering\s*\(.*?\)\s*([\d.,]+\s*kr)/i); var salesShipping = parsePrice(shippingMatch ? shippingMatch[1] : null); var saleDate = msg.getDate();
    if (!orderNumber || productName.startsWith("Ukendt") || salesPrice === 0) { Logger.log("ADVARSEL: Kunne ikke udtrække Shopify data: " + subject + " (Order: " + orderNumber + ", Pr: " + salesPrice + ")"); return; }
    Logger.log("Shopify Data: Order=" + orderNumber + ", Item=" + productName + ", SalesPrice=" + salesPrice + ", Shipping=" + salesShipping + ", Date=" + saleDate);
    var unsoldRow = findOldestUnsoldRowByProductName(sheet, productName); var fallback = false;
    if (unsoldRow === -1) { fallback = true; unsoldRow = getFirstEmptyRow(sheet); Logger.log("Ingen 'På lager' fundet for " + productName + ", fallback: ny række " + unsoldRow); sheet.getRange(unsoldRow, 4).setValue("RAW (Shopify): " + productName);
    } else { Logger.log("ÆLDSTE match for '" + productName + "' fundet på række " + unsoldRow); sheet.getRange(unsoldRow, 4).setValue(productName); }
    sheet.getRange(unsoldRow, 5).setValue(saleDate); sheet.getRange(unsoldRow, 6).setValue(salesPrice).setNumberFormat("0.00"); sheet.getRange(unsoldRow, 7).setValue("Solgt"); sheet.getRange(unsoldRow, 11).setValue("Shopify"); sheet.getRange(unsoldRow, 17).setValue(salesShipping).setNumberFormat("0.00"); sheet.getRange(unsoldRow, 19).setValue(orderNumber);
    sheet.getRange(unsoldRow, 1, 1, sheet.getLastColumn()).setFontLine("none"); calculateMOPForRow(sheet, unsoldRow); // Beregn M,O,P
  } catch(e) { Logger.log("FEJL i processShopifyMail: " + e); MailApp.sendEmail(ADMIN_EMAIL, "Fejl i processShopifyMail", "Fejl: " + e + "\nStack:\n" + (e.stack ? e.stack : 'Ingen stack trace')); }
}


/***********************************************************
 * SCANNER MAILS – TJEK FUNKTIONER
 ***********************************************************/

// --- Tjek VINTED ---
function checkVintedMails(includeArchived) {
  try { Logger.log("Tjekker Vinted-mails..."); var labelName = "Vinted Transaktioner"; var archiveLabelName = "Arkiveret - Script"; var query = 'label:"' + labelName + '"'; if (!includeArchived) { query += ' -label:"' + archiveLabelName + '"'; } var threads = GmailApp.search(query, 0, 100); Logger.log("Fundet " + threads.length + " Vinted-tråde."); var vintedLabel = GmailApp.getUserLabelByName(labelName); var archiveLabel = GmailApp.getUserLabelByName(archiveLabelName); if (!archiveLabel) { archiveLabel = GmailApp.createLabel(archiveLabelName); }
    for (var i = 0; i < threads.length; i++) { var msg = threads[i].getMessages()[threads[i].getMessageCount() - 1]; var processed = false; var labels = threads[i].getLabels().map(function(l){ return l.getName(); }); if (labels.indexOf(labelName) === -1 && (!includeArchived || labels.indexOf(archiveLabelName) === -1)) { continue; } if (msg.isUnread() || includeArchived) { safeExecute(function(){ processVintedMail(msg); }); processed = true; } if (processed) { if (vintedLabel && labels.indexOf(labelName) !== -1) { threads[i].removeLabel(vintedLabel); } if (labels.indexOf(archiveLabelName) === -1) { threads[i].addLabel(archiveLabel); } threads[i].markRead(); } } Logger.log("Færdig med Vinted.");
  } catch(e) { Logger.log("FEJL i checkVintedMails: " + e); MailApp.sendEmail(ADMIN_EMAIL, "Fejl i checkVintedMails", "Fejl: " + e + "\nStack:\n" + (e.stack ? e.stack : 'Ingen stack trace')); }
}
// --- Tjek DBA ---
function checkDbaMails(includeArchived) {
  try { Logger.log("Tjekker DBA-mails..."); var labelName = "DBA Salg"; var archiveLabelName = "Arkiveret - Script"; var query = 'label:"' + labelName + '"'; if (!includeArchived) { query += ' -label:"' + archiveLabelName + '"'; } var threads = GmailApp.search(query, 0, 100); Logger.log("Fundet " + threads.length + " DBA-tråde."); var dbaLabel = GmailApp.getUserLabelByName(labelName); var archiveLabel = GmailApp.getUserLabelByName(archiveLabelName); if (!archiveLabel) { archiveLabel = GmailApp.createLabel(archiveLabelName); }
    for (var i = 0; i < threads.length; i++) { var msg = threads[i].getMessages()[threads[i].getMessageCount() - 1]; var processed = false; var labels = threads[i].getLabels().map(function(l){ return l.getName(); }); if (labels.indexOf(labelName) === -1 && (!includeArchived || labels.indexOf(archiveLabelName) === -1)) { continue; } if (msg.isUnread() || includeArchived) { var contentLower = ""; try { contentLower = msg.getPlainBody().toLowerCase(); } catch(e) { Logger.log("Kunne ikke læse body i DBA mail " + i); } if (contentLower.includes("pak ") || contentLower.includes("qr-kode") || contentLower.includes("indleveringskode")) { safeExecute(function(){ processDbaMail(msg); }); processed = true; } else { Logger.log("DBA mail i tråd " + i + " indeholdt ikke salgs-keywords."); } } if (processed) { if (dbaLabel && labels.indexOf(labelName) !== -1) { threads[i].removeLabel(dbaLabel); } if (labels.indexOf(archiveLabelName) === -1) { threads[i].addLabel(archiveLabel); } threads[i].markRead(); } } Logger.log("Færdig med DBA.");
  } catch(e) { Logger.log("FEJL i checkDbaMails: " + e); MailApp.sendEmail(ADMIN_EMAIL, "Fejl i checkDbaMails", "Fejl: " + e + "\nStack:\n" + (e.stack ? e.stack : 'Ingen stack trace')); }
}
// --- Tjek TRADERA ---
function checkTraderaMails(includeArchived) {
  try { Logger.log("Tjekker Tradera-mails..."); var labelName = "Tradera"; var archiveLabelName = "Arkiveret - Script"; var query = 'label:"' + labelName + '"'; if (!includeArchived) { query += ' -label:"' + archiveLabelName + '"'; } var threads = GmailApp.search(query, 0, 100); Logger.log("Fundet " + threads.length + " Tradera-tråde."); var traderaLabel = GmailApp.getUserLabelByName(labelName); var archiveLabel = GmailApp.getUserLabelByName(archiveLabelName); if (!archiveLabel) { archiveLabel = GmailApp.createLabel(archiveLabelName); }
    for (var i = 0; i < threads.length; i++) { var msg = threads[i].getMessages()[threads[i].getMessageCount() - 1]; var processed = false; var labels = threads[i].getLabels().map(function(l){ return l.getName(); }); if (labels.indexOf(labelName) === -1 && (!includeArchived || labels.indexOf(archiveLabelName) === -1)) { continue; } var subjectLower = msg.getSubject().toLowerCase(); if (subjectLower.includes("du har vundet") || subjectLower.includes("betalning mottagen")) { if (msg.isUnread() || includeArchived) { safeExecute(function(){ processTraderaMail(msg); }); processed = true; } } if (processed) { if (traderaLabel && labels.indexOf(labelName) !== -1) { threads[i].removeLabel(traderaLabel); } if (labels.indexOf(archiveLabelName) === -1) { threads[i].addLabel(archiveLabel); } threads[i].markRead(); } } Logger.log("Færdig med Tradera.");
  } catch(e) { Logger.log("FEJL i checkTraderaMails: " + e); MailApp.sendEmail(ADMIN_EMAIL, "Fejl i checkTraderaMails", "Fejl: " + e + "\nStack:\n" + (e.stack ? e.stack : 'Ingen stack trace')); }
}
// --- Tjek SHOPIFY ---
function checkShopifyMails(includeArchived) {
  try { Logger.log("Tjekker Shopify-mails..."); var labelName = "Shopify salg"; var archiveLabelName = "Arkiveret - Script"; var query = 'label:"' + labelName + '"'; if (!includeArchived) { query += ' -label:"' + archiveLabelName + '"'; } var threads = GmailApp.search(query, 0, 100); Logger.log("Fundet " + threads.length + " Shopify-tråde."); var shopifyLabel = GmailApp.getUserLabelByName(labelName); var archiveLabel = GmailApp.getUserLabelByName(archiveLabelName); if (!archiveLabel) { archiveLabel = GmailApp.createLabel(archiveLabelName); }
    for (var i = 0; i < threads.length; i++) { var msg = threads[i].getMessages()[threads[i].getMessageCount()-1]; var processed = false; var labels = threads[i].getLabels().map(function(l){ return l.getName(); }); if (labels.indexOf(labelName) === -1 && (!includeArchived || labels.indexOf(archiveLabelName) === -1)) { continue; } var subject = msg.getSubject(); if (subject.includes("[RefindTech]") && subject.includes("Ordren #")) { if (msg.isUnread() || includeArchived) { safeExecute(function(){ processShopifyMail(msg); }); processed = true; } } else { Logger.log("Shopify mail i tråd " + i + " matchede ikke emne: " + subject); } if (processed) { if (shopifyLabel && labels.indexOf(labelName) !== -1) { threads[i].removeLabel(shopifyLabel); } if (labels.indexOf(archiveLabelName) === -1) { threads[i].addLabel(archiveLabel); } threads[i].markRead(); } } Logger.log("Færdig med Shopify.");
  } catch(e) { Logger.log("FEJL i checkShopifyMails: " + e); MailApp.sendEmail(ADMIN_EMAIL, "Fejl i checkShopifyMails", "Fejl: " + e + "\nStack:\n" + (e.stack ? e.stack : 'Ingen stack trace')); }
}


/***********************************************************
 * CONDITIONAL FORMATTING & DASHBOARD FUNCTIONS
 ***********************************************************/

function setupConditionalFormatting() {
  try { Logger.log("Indstiller conditional formatting..."); var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Ark1"); if (!sheet || sheet.getLastRow() < 2) { Logger.log("Ark1 tomt."); return; } var rules = sheet.getConditionalFormatRules(); var newRules = []; var rangeG = sheet.getRange("G2:G" + sheet.getLastRow()); newRules.push(SpreadsheetApp.newConditionalFormatRule().whenTextEqualTo("På lager").setBackground("#C6EFCE").setRanges([rangeG]).build()); newRules.push(SpreadsheetApp.newConditionalFormatRule().whenTextEqualTo("Solgt").setBackground("#C9DAF8").setRanges([rangeG]).build()); newRules.push(SpreadsheetApp.newConditionalFormatRule().whenTextEqualTo("Annulleret").setBackground("#F4CCCC").setRanges([rangeG]).build()); for (var i = 0; i < rules.length; i++) { var rule = rules[i]; var ranges = rule.getRanges(); var appliesToGData = false; for (var j = 0; j < ranges.length; j++) { if (ranges[j].getA1Notation().toUpperCase().startsWith("G") && ranges[j].getRow() > 1) { appliesToGData = true; break; } } if (!appliesToGData) { newRules.push(rule); } } sheet.setConditionalFormatRules(newRules); Logger.log("Conditional formatting sat.");
  } catch(e) { Logger.log("FEJL i setupConditionalFormatting: " + e); MailApp.sendEmail(ADMIN_EMAIL, "Fejl i setupConditionalFormatting", "Fejl: " + e + "\nStack:\n" + (e.stack ? e.stack : 'Ingen stack trace')); }
}
function updateDashboard() {
  try { Logger.log("Opdaterer Dashboard…"); var ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheetByName("Ark1"); var dash = ss.getSheetByName("Dashboard"); if (!sheet || !dash) { Logger.log("Ark1/Dashboard ikke fundet."); return; } var dataRange = sheet.getDataRange(); if (dataRange.getNumRows() < 2) { Logger.log("Ingen data i Ark1."); return;} var data = dataRange.getValues(); var stats = calculateStats(data); updateDashboardSheet(dash, stats); Logger.log("Dashboard opdateret.");
  } catch (e) { Logger.log("FEJL i updateDashboard: " + e); MailApp.sendEmail(ADMIN_EMAIL, "Fejl i updateDashboard", "Fejl: " + e + "\nStack:\n" + (e.stack ? e.stack : 'Ingen stack trace')); }
}
function calculateStats(data) {
  var counts = { paLager: 0, solgt: 0, annulleret: 0 }; var monthlyProfit = {}; var monthlyTurnover = {}; var monthlyVat = {}; var inStockCounts = {}; var bestROI = -Infinity; var bestROIProduct = "Ingen solgte varer"; var bestROIValue = 0; var salesPerMonthProduct = {};
   function parseNumericPrice(priceValue) { if (priceValue === null || priceValue === undefined || priceValue === "") return 0; if (typeof priceValue === 'number') return priceValue; var priceStr = String(priceValue).replace(/(DKK|kr|SEK)/gi, '').trim().replace(/\./g, '').replace(/,/g, '.'); var price = parseFloat(priceStr); return isNaN(price) ? 0 : price; }
  for (var i = 1; i < data.length; i++) { var row = data[i]; var status = String(row[6] || "").toLowerCase().trim(); var product = String(row[3] || "Ukendt").trim(); var purchasePrice = parseNumericPrice(row[2]); var saleDate = row[4] instanceof Date ? row[4] : null; var salesPrice = parseNumericPrice(row[5]);
    // Læs M, O, P direkte fra arket nu, da de er beregnet i scriptet
    var profit = parseNumericPrice(row[12]);      // M = index 12
    var calculatedVat = parseNumericPrice(row[15]); // P = index 15

    if (status === "på lager") { counts.paLager++; if (product !== "Ukendt") { inStockCounts[product] = (inStockCounts[product] || 0) + 1; }
    } else if (status === "solgt") {
      counts.solgt++; // Profit er allerede læst fra kolonne M
      if (purchasePrice > 0 && profit > -Infinity) { var roi = (profit / purchasePrice) * 100; if (roi > bestROI) { bestROI = roi; bestROIProduct = product; bestROIValue = Math.round(roi * 10) / 10; } }
      if (saleDate) {
        var monthStr = Utilities.formatDate(new Date(saleDate), Session.getScriptTimeZone(), "MMMM yyyy"); // Inkluder år
        if (!monthlyProfit[monthStr]) { monthlyProfit[monthStr] = 0; monthlyTurnover[monthStr] = 0; monthlyVat[monthStr] = 0; salesPerMonthProduct[monthStr] = {}; }
        monthlyProfit[monthStr] += profit; monthlyTurnover[monthStr] += salesPrice; // Turnover er stadig baseret på salgsprisen (F)
        monthlyVat[monthStr] += calculatedVat; // Brugtmoms læst fra P
        if (product !== "Ukendt") { salesPerMonthProduct[monthStr][product] = (salesPerMonthProduct[monthStr][product] || 0) + 1; } }
    } else if (status === "annulleret") { counts.annulleret++; }
  }
  var combinedData = [["Måned", "Fortjeneste (Vare)", "Omsætning (Vare)", "Profitmargin (%)", "Beregnet Brugtmoms"]];
  var months = Object.keys(monthlyProfit).sort(function(a, b) { var monthMap = {"januar":0, "februar":1, "marts":2, "april":3, "maj":4, "juni":5, "juli":6, "august":7, "september":8, "oktober":9, "november":10, "december":11}; var partsA = a.split(" "); var partsB = b.split(" "); if (partsA.length < 2 || partsB.length < 2) return 0; var yearA = parseInt(partsA[1]); var yearB = parseInt(partsB[1]); var monthA = monthMap[partsA[0].toLowerCase()]; var monthB = monthMap[partsB[0].toLowerCase()]; if (isNaN(yearA) || isNaN(yearB) || monthA === undefined || monthB === undefined) return 0; if (yearA !== yearB) return yearA - yearB; return monthA - monthB; });
   months.forEach(function(m) { var profitVal = monthlyProfit[m]; var turnoverVal = monthlyTurnover[m]; var vatVal = monthlyVat[m]; var margin = (turnoverVal > 0) ? Math.round((profitVal / turnoverVal) * 1000) / 10 : 0; combinedData.push([m, profitVal, turnoverVal, margin, vatVal]); });
  return { counts: counts, combinedData: combinedData, bestROIProduct: bestROIProduct, bestROIValue: bestROIValue, inStockCounts: inStockCounts, salesPerMonthProduct: salesPerMonthProduct };
}
function updateDashboardSheet(dash, stats) {
  dash.getRange("A1").setValue("Status Oversigt"); dash.getRange("A2:B4").clearContent().clearFormat(); dash.getRange("A2").setValue("På lager").setFontWeight("bold"); dash.getRange("B2").setValue(stats.counts.paLager).setNumberFormat("0"); dash.getRange("A3").setValue("Solgt").setFontWeight("bold"); dash.getRange("B3").setValue(stats.counts.solgt).setNumberFormat("0"); dash.getRange("A4").setValue("Annulleret").setFontWeight("bold"); dash.getRange("B4").setValue(stats.counts.annulleret).setNumberFormat("0");
  dash.getRange("A6").setValue("Sidst opdateret:").setFontWeight("bold"); dash.getRange("B6").setValue(new Date()).setNumberFormat("dd/mm/yyyy HH:mm:ss");
  var monthlyStartRow = 8; dash.getRange(monthlyStartRow, 1, 30, 5).clearContent().clearFormat(); if (stats.combinedData.length > 1) { dash.getRange(monthlyStartRow, 1, stats.combinedData.length, 5).setValues(stats.combinedData); dash.getRange(monthlyStartRow, 1, 1, 5).setFontWeight("bold"); dash.getRange(monthlyStartRow + 1, 2, stats.combinedData.length - 1, 2).setNumberFormat("#,##0.00 kr"); dash.getRange(monthlyStartRow + 1, 4, stats.combinedData.length - 1, 1).setNumberFormat("0.0'%'"); dash.getRange(monthlyStartRow + 1, 5, stats.combinedData.length - 1, 1).setNumberFormat("#,##0.00 kr"); } else { dash.getRange(monthlyStartRow, 1).setValue("Ingen månedlig data endnu."); }
  var roiHeaderRow = monthlyStartRow + Math.max(1, stats.combinedData.length -1) + 2; dash.getRange(roiHeaderRow, 1, 3, 2).clearContent().clearFormat(); dash.getRange(roiHeaderRow, 1).setValue("Højeste ROI-vare:").setFontWeight("bold"); dash.getRange(roiHeaderRow + 1, 1).setValue("Vare").setFontWeight("bold"); dash.getRange(roiHeaderRow + 1, 2).setValue("ROI (%)").setFontWeight("bold"); dash.getRange(roiHeaderRow + 2, 1).setValue(stats.bestROIProduct); dash.getRange(roiHeaderRow + 2, 2).setValue(stats.bestROIValue).setNumberFormat("0.0'%'");
  var stockHeaderRow = roiHeaderRow + 5; dash.getRange(stockHeaderRow, 1, 30, 2).clearContent().clearFormat(); dash.getRange(stockHeaderRow, 1).setValue("Varer på lager:").setFontWeight("bold"); var stockTable = [["Vare", "Antal"]]; var sortedStock = Object.keys(stats.inStockCounts).sort(); sortedStock.forEach(function(prod) { stockTable.push([prod, stats.inStockCounts[prod]]); }); if (stockTable.length > 1) { dash.getRange(stockHeaderRow + 1, 1, stockTable.length, 2).setValues(stockTable); dash.getRange(stockHeaderRow + 1, 1, 1, 2).setFontWeight("bold"); dash.getRange(stockHeaderRow + 2, 2, stockTable.length - 1, 1).setNumberFormat("0"); } else { dash.getRange(stockHeaderRow + 1, 1).setValue("Intet på lager."); }
  var salesHeaderRow = stockHeaderRow + Math.max(1, stockTable.length -1) + 2; dash.getRange(salesHeaderRow, 1, 30, 15).clearContent().clearFormat(); dash.getRange(salesHeaderRow, 1).setValue("Salg pr. måned (antal solgte varer pr. produkt):").setFontWeight("bold"); var allProducts = {}; for (var month in stats.salesPerMonthProduct) { for (var prod in stats.salesPerMonthProduct[month]) { allProducts[prod] = true; } } var productList = Object.keys(allProducts).sort(); var salesTable = []; var salesHeader = ["Måned"].concat(productList); salesTable.push(salesHeader);
   var sortedMonthsSales = Object.keys(stats.salesPerMonthProduct).sort(function(a, b) { var monthMap = {"januar":0, "februar":1, "marts":2, "april":3, "maj":4, "juni":5, "juli":6, "august":7, "september":8, "oktober":9, "november":10, "december":11}; var partsA = a.split(" "); var partsB = b.split(" "); if (partsA.length < 2 || partsB.length < 2) return 0; var yearA = parseInt(partsA[1]); var yearB = parseInt(partsB[1]); var monthA = monthMap[partsA[0].toLowerCase()]; var monthB = monthMap[partsB[0].toLowerCase()]; if (isNaN(yearA) || isNaN(yearB) || monthA === undefined || monthB === undefined) return 0; if (yearA !== yearB) return yearA - yearB; return monthA - monthB; });
  sortedMonthsSales.forEach(function(month) { var row = [month]; productList.forEach(function(prod) { row.push(stats.salesPerMonthProduct[month][prod] || 0); }); salesTable.push(row); }); if (salesTable.length > 1) { var numCols = Math.min(productList.length + 1, dash.getMaxColumns()); if (numCols > 1) { dash.getRange(salesHeaderRow + 1, 1, salesTable.length, numCols).setValues(salesTable); dash.getRange(salesHeaderRow + 1, 1, 1, numCols).setFontWeight("bold"); dash.getRange(salesHeaderRow + 2, 2, salesTable.length - 1, numCols - 1).setNumberFormat("0"); } else { dash.getRange(salesHeaderRow + 1, 1).setValue("Fejl: For mange produkter til at vise."); } } else { dash.getRange(salesHeaderRow + 1, 1).setValue("Ingen salgsdata endnu."); }
}


/* formatArk1() – Formatér Ark1, sorter */
// FJERNET FORMELSÆTNING FRA DENNE FUNKTION
function formatArk1() {
  try {
    Logger.log("Formaterer Ark1 (uden formler)...");
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Ark1");
    if (!sheet) { Logger.log("Ark 'Ark1' ikke fundet."); return; }

    var headers = [ "Transaktions-/ordrenummer", "Købsdato", "Købspris", "Varenavn", "Salgsdato", "Salgspris", "Status", "", "Fragtleverandør", "DAO-/QR-kode", "Salgsplatform", "Købsplatform", "Fortjeneste", "Sælger", "Momsgrundlag", "Brugtmoms", "Salgsfragt", "Købsfragt", "Salgs Ordrenr." ]; // A-S
    sheet.getRange("A1:S1").setValues([headers]).setFontWeight("bold").setHorizontalAlignment("CENTER");
    sheet.setFrozenRows(1);

    var widths = [150, 100, 100, 200, 100, 100, 90, 20, 120, 150, 100, 100, 100, 120, 100, 100, 100, 100, 100];
    for (var col = 0; col < widths.length; col++) { sheet.setColumnWidth(col + 1, widths[col]); }

    var lastRow = sheet.getLastRow();
    if (lastRow > 1) {
      var dataRange = sheet.getRange("A2:S" + lastRow);
      dataRange.setHorizontalAlignment("LEFT");
      sheet.getRange("B2:B" + lastRow).setNumberFormat("dd/mm/yyyy");
      sheet.getRange("E2:E" + lastRow).setNumberFormat("dd/mm/yyyy");
      var currencyCols = ["C", "F", "M", "O", "P", "Q", "R"];
      currencyCols.forEach(function(colLetter) { sheet.getRange(colLetter + "2:" + colLetter + lastRow).setNumberFormat("0.00"); }); // Format som tal
      sheet.getRange("S2:S" + lastRow).setNumberFormat("@"); // Tekst format

      // Sorter efter Købsdato (Kolonne B) faldende
      dataRange.sort({column: 2, ascending: false});

      // Genanvend overstregning EFTER sortering
      var sortedStatuses = sheet.getRange(2, 7, lastRow - 1, 1).getValues();
      var sortedRange = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn());
      var fontLines = sortedRange.getFontLines();
      for (var i = 0; i < sortedStatuses.length; i++) {
          var status = String(sortedStatuses[i][0]).toLowerCase().trim(); var lineStyle = (status === "annulleret") ? "line-through" : "none";
          for (var j = 0; j < fontLines[i].length; j++) { fontLines[i][j] = lineStyle; } }
      sortedRange.setFontLines(fontLines);
    }
    setupConditionalFormatting();
    Logger.log("Ark1 formateret.");
  } catch(e) { Logger.log("FEJL i formatArk1: " + e); MailApp.sendEmail(ADMIN_EMAIL, "Fejl i formatArk1", "Fejl: " + e + "\nStack:\n" + (e.stack ? e.stack : 'Ingen stack trace')); }
}

// FJERNEDE updateFormulasForRow() - erstattes af calculateMOPForRow()


// *** NY Funktion til at beregne og skrive M, O, P for en given række ***
function calculateMOPForRow(sheet, row) {
  try {
      if (!sheet || !row || row < 2) return;

      var statusRange = sheet.getRange(row, 7); // Kolonne G
      var status = statusRange.getValue().toString().toLowerCase();

      // Ryd M, O, P hvis status er "Annulleret"
      if (status === "annulleret") {
          sheet.getRange(row, 13).clearContent().clearNote(); // M
          sheet.getRange(row, 15, 1, 2).clearContent().clearNote(); // O, P
          Logger.log("M, O, P ryddet for annulleret række " + row);
          return;
      }

      // Læs Købspris (C) og Salgspris (F) som tal
      var purchasePrice = sheet.getRange(row, 3).getValue(); // Kolonne C
      var salesPrice = sheet.getRange(row, 6).getValue();    // Kolonne F

      // Tjek om begge priser er gyldige tal
      if (typeof purchasePrice !== 'number' || typeof salesPrice !== 'number') {
         Logger.log("Venter med MOP beregning for række " + row + " - C eller F er ikke et tal endnu (Køb: " + purchasePrice + ", Salg: " + salesPrice + ")");
         // Ryd evt. gamle beregninger hvis priserne ikke længere er tal
         sheet.getRange(row, 13).clearContent().clearNote(); // M
         sheet.getRange(row, 15, 1, 2).clearContent().clearNote(); // O, P
         return;
      }

      // Beregn værdier kun hvis status er "Solgt" og priser > 0
      var profit = 0;
      var momsGrundlag = 0;
      var brugtMoms = 0;

      if (status === "solgt" && purchasePrice > 0 && salesPrice > 0) {
          profit = salesPrice - purchasePrice;
          // Kun beregn moms hvis der er fortjeneste (brugtmoms betales kun af positiv fortjeneste)
          if (profit > 0) {
              momsGrundlag = profit * 0.8;
              brugtMoms = momsGrundlag * 0.25; // Eller profit * 0.2
          }
      }

      // Skriv de beregnede VÆRDIER til arket
      sheet.getRange(row, 13).setValue(profit).setNumberFormat("0.00");        // M: Fortjeneste
      sheet.getRange(row, 15).setValue(momsGrundlag).setNumberFormat("0.00");  // O: Momsgrundlag
      sheet.getRange(row, 16).setValue(brugtMoms).setNumberFormat("0.00");     // P: Brugtmoms

      Logger.log("M, O, P beregnet og skrevet for række " + row + " (Profit: " + profit + ")");

  } catch (e) {
       Logger.log("FEJL i calculateMOPForRow (række " + row + "): " + e);
       // Overvej at sende mail her, hvis det er kritisk
       // MailApp.sendEmail(ADMIN_EMAIL, "Fejl i calculateMOPForRow", "Fejl på række " + row + ": " + e);
  }
}

// *** NY Funktion til at genberegne M,O,P for HELE arket (kaldes fra Refresh) ***
function recalculateAllMOP() {
   try {
       Logger.log("Starter genberegning af M, O, P for alle rækker...");
       var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Ark1");
       if (!sheet) { Logger.log("Ark 'Ark1' ikke fundet til genberegning."); return; }
       var lastRow = sheet.getLastRow();
       if (lastRow < 2) { Logger.log("Ingen data i Ark1 at genberegne."); return; }

       for (var row = 2; row <= lastRow; row++) {
           calculateMOPForRow(sheet, row); // Kald beregningsfunktionen for hver række
       }
       SpreadsheetApp.flush(); // Sørg for at alle værdier skrives
       Logger.log("Genberegning af M, O, P fuldført.");
   } catch(e) {
       Logger.log("FEJL i recalculateAllMOP: " + e);
       MailApp.sendEmail(ADMIN_EMAIL, "Fejl i recalculateAllMOP", "Fejl: " + e + "\nStack:\n" + (e.stack ? e.stack : 'Ingen stack trace'));
   }
}

// *** NY Funktion til at rydde salgsdata (inkl. M,O,P) ***
function clearSalesData(sheet, row) {
    sheet.getRange(row, 5, 1, 2).clearContent(); // E, F (Salgsdato, Salgspris)
    sheet.getRange(row, 9, 1, 3).clearContent(); // I, J, K (Fragtlev, Kode, Salgsplatform)
    sheet.getRange(row, 13).clearContent().clearNote(); // M (Fortjeneste)
    sheet.getRange(row, 15, 1, 2).clearContent().clearNote(); // O, P (Momsgrundlag, Brugtmoms)
    sheet.getRange(row, 17).clearContent(); // Q (Salgsfragt)
    sheet.getRange(row, 19).clearContent(); // S (Salgs Ordrenr)
    Logger.log("Salgsdata ryddet for række " + row);
}


/***********************************************************
 * HJÆLPEFUNKTIONER TIL MAILPROCESSERING (UDTRÆK)
 ***********************************************************/

// *** Funktion til at parse Vinted Pris som TAL ***
function extractNumericPurchasePrice(content) { var match = content.match(/(?:\*Betalt:\*|Betalt:)\s*([\d.,]+)/i); if (match && match[1]) { var priceStr = match[1].trim().replace(/\./g, '').replace(/,/g, '.'); var price = parseFloat(priceStr); return isNaN(price) ? null : price; } return null; }
// *** Funktion til at parse Tradera Pris som TAL ***
function extractNumericTraderaPrice(content) { var totalMatch = content.match(/Total beløb:\s*([\d.,]+)\s*([A-Z]{2,4})/i); if (totalMatch && totalMatch[1]) { var purchasePriceStr = totalMatch[1].replace(/[.,]/g, ""); if (totalMatch[1].indexOf('.') === -1 && totalMatch[1].indexOf(',') === -1 && purchasePriceStr.length > 2) { purchasePriceStr = (parseFloat(purchasePriceStr) / 100).toFixed(2); } else { purchasePriceStr = totalMatch[1].replace(/,/g, '.'); } var price = parseFloat(purchasePriceStr); return isNaN(price) ? null : price; } return null; }
// ... (Resten af hjælpefunktionerne er uændrede) ...
function extractItemName(content) { var regex1 = /\*Ordre:\*\s*([\s\S]+?)(?:\*Betalt:\*|Betalt:)/i; var regex2 = /Ordre:\s*([\s\S]+?)(?:Betalt:)/i; var match = content.match(regex1) || content.match(regex2); var rawName = match ? match[1].replace(/\n/g, ' ').trim() : "Ukendt Vinted Vare"; return guessChromecastModel(rawName); }
function extractPurchaseDate(content) { var match = content.match(/\*?Betalingsdato:\*?\s*(\d{1,2}\/\d{1,2}\/\d{4})\s*(\d{1,2}:\d{2})/i); if (match) { var datePart = match[1]; var timePart = match[2]; var dateParts = datePart.split('/'); if (dateParts.length === 3) { var timeParts = timePart.split(':'); if (timeParts[0].length === 1) timeParts[0] = '0' + timeParts[0]; if (timeParts[1].length === 1) timeParts[1] = '0' + timeParts[1]; timePart = timeParts.join(':'); var formattedDateString = dateParts[1].padStart(2, '0') + '/' + dateParts[0].padStart(2, '0') + '/' + dateParts[2] + ' ' + timePart; try { var dateObj = Utilities.parseDate(formattedDateString, Session.getScriptTimeZone(), "MM/dd/yyyy HH:mm"); if (!isNaN(dateObj.getTime())) return dateObj; else Logger.log("Ugyldig dato efter parsing: " + formattedDateString); } catch (e) { Logger.log("Fejl ved Utilities.parseDate: " + formattedDateString + " - " + e); } } } Logger.log("Kunne ikke finde gyldig dato i Vinted mail, bruger nuværende tid."); return new Date(); }
function extractTransactionId(content) { return extractWithRegex(content, /\*?Transaktions-id:\*?\s*(\d+)/i); }
function extractSellerName(content) { return extractWithRegex(content, /Sælger:\s*([^\n]+)/i); }
function extractTraderaOrderNumber(content) { return extractWithRegex(content, /Ordrenummer\s*(\d+)/i); }
function extractTraderaProductFromSubject(subject) { var regex = /-\s*(.*?)(?:\s*\()|$/; var match = subject.match(regex); if (match && match[1]) { return match[1].trim(); } return subject.replace(/^Du har vundet auktionen\s*:\s*/i, '').trim(); }
function extractDbaProductName(content, subject) { var regex = /Pak\s*["'«]([^"'»]+)["'»]/i; var match = content.match(regex); if (match && match[1]) { return match[1].trim(); } if (subject) { return subject.replace(/^Sendt:\s*/i, '').trim(); } return ""; }
function extractWithRegex(content, regex) { if (!content || !regex) return ""; var match = content.match(regex); return match && match[1] ? match[1].trim() : ""; }
function detectLikelyProductInBody(content) { var lower = content.toLowerCase(); if (lower.includes("chromecast med google tv (hd)")) { return "Chromecast HD"; } if (lower.includes("chromecast med google tv (4k)")) { return "Chromecast 4K"; } if (lower.includes("chromecast ultra")) { return "Chromecast Ultra"; } if (lower.includes("chromecast 3")) { return "Chromecast 3"; } if (lower.includes("chromecast 2")) { return "Chromecast 2"; } if (lower.includes("apple tv 4k")) { return "Apple TV 4K"; } if (lower.includes("apple tv hd")) { return "Apple TV HD"; } if (lower.includes("apple tv")) { return "Apple TV"; } if (lower.includes("chromecast")) { return "Chromecast"; } return ""; }
function guessChromecastModel(rawName) { if (!rawName) return "Ukendt Vare"; var lower = String(rawName).toLowerCase().trim().replace(/^google\s+/, "").replace(/\s*\([^)]*\)/, ""); if (lower.includes("apple tv 4k")) { return "Apple TV 4K"; } if (lower.includes("apple tv hd")) { return "Apple TV HD"; } if (lower.includes("apple tv")) { return "Apple TV"; } if (lower.includes("chromecast")) { if ((lower.includes("med google tv") || lower.includes("google tv")) && lower.includes("hd")) { return "Chromecast HD"; } if ((lower.includes("med google tv") || lower.includes("google tv")) && lower.includes("4k")) { return "Chromecast 4K"; } if (lower.includes("med google tv") || lower.includes("google tv")) { return "Chromecast HD"; } if (lower.includes("ultra")) { return "Chromecast Ultra"; } if (lower.includes("audio")) { return "Chromecast Audio"; } if (lower.includes(" 2") || lower.includes(" gen 2") || lower.includes(" 2nd gen")) { return "Chromecast 2"; } if (lower.includes(" 3") || lower.includes(" gen 3") || lower.includes(" 3rd gen")) { return "Chromecast 3"; } if (lower.includes(" 1") || lower.includes(" gen 1") || lower.includes(" 1st gen")) { return "Chromecast 1"; } return "Chromecast"; } return rawName.trim(); }
function findRowByTransactionId(sheet, id) { if (!id) return -1; var ids = sheet.getRange("A2:A" + sheet.getLastRow()).getValues(); for (var i = 0; i < ids.length; i++) { if (String(ids[i][0]).trim() === String(id).trim()) { return i + 2; } } return -1; }
function findOldestUnsoldRowByProductName(sheet, productName) { var normProductName = guessChromecastModel(productName).toLowerCase(); if (normProductName.startsWith("ukendt") || normProductName.startsWith("raw")) { Logger.log("Kan ikke matche på ukendt/RAW: " + productName); return -1; } var data = sheet.getRange("B2:G" + sheet.getLastRow()).getValues(); var matches = []; Logger.log("Søger ÆLDSTE 'På lager' for PRÆCIS: '" + normProductName + "'"); for (var i = 0; i < data.length; i++) { var purchaseDate = data[i][0]; var rowProductNameRaw = String(data[i][2] || "").trim(); var status = String(data[i][5] || "").toLowerCase().trim(); if (rowProductNameRaw && status === "på lager" && purchaseDate instanceof Date && !isNaN(purchaseDate.getTime())) { var normRowProductName = guessChromecastModel(rowProductNameRaw).toLowerCase(); if (normRowProductName === normProductName) { matches.push({ row: i + 2, date: purchaseDate }); } } else if (status === "på lager" && !(purchaseDate instanceof Date && !isNaN(purchaseDate.getTime()))){ Logger.log("ADVARSEL: Række " + (i+2) + " 'På lager' har ugyldig købsdato: " + purchaseDate); } } if (matches.length === 0) { Logger.log("Ingen match fundet for: '" + normProductName + "'"); return -1; } matches.sort(function(a, b) { return a.date.getTime() - b.date.getTime(); }); Logger.log("Ældste match for '" + normProductName + "' række: " + matches[0].row + " (Købt: " + matches[0].date + ")"); return matches[0].row; }
function findRowByShippingCode(sheet, code) { if (!code || !isValidShippingCode(code)) return -1; var codes = sheet.getRange("J2:J" + sheet.getLastRow()).getValues(); for (var i = 0; i < codes.length; i++) { if (String(codes[i][0]).trim() === String(code).trim()) { return i + 2; } } return -1; }
function logDebug(fnName, msg) { try { var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Debug"); if (!sheet) { Logger.log("FEJL (logDebug): Ark 'Debug' ikke fundet. Msg: (" + fnName + "): " + msg); return; } sheet.appendRow([new Date(), fnName, msg]); } catch(e) { Logger.log("FEJL i logDebug selv: " + e); } }
function getFirstEmptyRow(sheet) { return sheet.getLastRow() + 1; }
function extractShippingCode(emailText) { var daoRegex = /(?:DAO|dao)\s*(?:indleveringskode|pakkekode)\s*:?\s*([\d-]+)/i; var daoMatch = emailText.match(daoRegex); if (daoMatch && daoMatch[1]) { return daoMatch[1].trim(); } var glsQrRegex = /(https:\/\/api\.homerunner\.com\/v\d\/qrcode\/[^\s\]\)<>]+)/i; var glsQrMatch = emailText.match(glsQrRegex); if (glsQrMatch && glsQrMatch[1]) { return glsQrMatch[1].trim(); } var qrRegex = /QR[-\s]*kode:\s*\[?(\S+)\]?/i; var qrMatch = emailText.match(qrRegex); if (qrMatch && qrMatch[1]) { return qrMatch[1].trim(); } return ""; }
function isValidShippingCode(code) { return code && String(code).trim().length > 0 && String(code).trim() !== "Kode mangler"; }
function parseInlineQrImage(htmlContent) { var imgRegex = /<img[^>]+src="([^"]+)"[^>]*>/ig; var match; while ((match = imgRegex.exec(htmlContent)) !== null) { var src = match[1]; if (src && (src.toLowerCase().includes("qr") || src.includes("api.homerunner.com"))) { return src; } } return ""; }
function getQRCodeAttachmentUrl(msg) { try { var attachments = msg.getAttachments(); for (var i = 0; i < attachments.length; i++) { var attachment = attachments[i]; var fileName = (attachment.getName() || "").toLowerCase(); var mimeType = (attachment.getContentType() || "").toLowerCase(); if ((mimeType.startsWith("image/") || mimeType === "application/pdf") && (fileName.includes("qr") || fileName.includes("label"))) { var folderName = "Temp_QR_Codes"; var folders = DriveApp.getFoldersByName(folderName); var folder = folders.hasNext() ? folders.next() : DriveApp.createFolder(folderName); var existingFiles = folder.getFilesByName(attachment.getName()); if (existingFiles.hasNext()) { var f = existingFiles.next(); f.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW); Logger.log("QR fandtes: " + f.getUrl()); return f.getUrl(); } else { var file = folder.createFile(attachment); file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW); Logger.log("QR gemt: " + file.getUrl()); return file.getUrl(); } } } } catch (e) { Logger.log("Fejl ved vedhæftning QR: " + e); } return ""; }
function extractShippingProvider(content) { if (!content) return ""; var lower = content.toLowerCase(); if (lower.includes("gls")) { return "GLS"; } if (lower.includes("dao")) { return "DAO"; } if (lower.includes("postnord") || lower.includes("posten")) { return "PostNord"; } if (lower.includes("bring")) { return "Bring"; } if (lower.includes("instabox")) { return "Instabox"; } return ""; }
